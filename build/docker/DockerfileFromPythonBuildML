
# 注意 此版本不可能用，放在这里仅用做参考
# 加入cuda cudnnn 驱动，以及 pytorch tensorflow 后
# 但测试 build 一直不成功，很多 cuda 依赖无法安装成功,下载相关依赖到本地，还有其他依赖，编辑时间过长，
# 实无时间测试其安装后大小如何？ 转而直接用采用官方 cuda 和或者pytorch images包, 但文件极大，估计要后期再优化

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/engine/reference/builder/
ARG PYTHON_VERSION=3.12.4
FROM python:${PYTHON_VERSION}-slim as base
# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1
# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1
WORKDIR /app
# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/
ARG UID=10001

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
RUN --mount=type=cache,target=/root/.cache/pip \
  --mount=type=bind,source=requirements.txt,target=requirements.txt \
  --mount=type=bind,source=build/wheels,target=/wheels \
  --mount=type=bind,source=build/tools,target=/tools,rw=true \
  set -ex \
  && apt-get update \
  && apt-get install -y --no-install-recommends supervisor software-properties-common build-essential gnupg2  \
  && apt install nvidia-detect -y \
  && dpkg -i /tools/Debian_cuda1205/glx-diversions_1.2.2_amd64.deb \
  && dpkg -i /tools/Debian_cuda1205/glx-alternative-mesa_1.2.2_amd64.deb \
  && dpkg -i /tools/Debian_cuda1205/update-glx_1.2.2_amd64.deb \
  && dpkg -i /tools/Debian_cuda1205/glx-alternative-nvidia_1.2.2_amd64.deb \
  && dpkg -i /tools/Debian_cuda1205/cuda-repo-debian12-12-5-local_12.5.1-555.42.06-1_amd64.deb \
  && cp /var/cuda-repo-debian12-12-5-local/cuda-*-keyring.gpg /usr/share/keyrings/ \
  && dpkg -i /tools/Debian_cuda1205/cudnn-local-repo-debian12-9.2.1_1.0-1_amd64.deb \
  && cp /var/cudnn-local-repo-debian12-9.2.1/cudnn-*-keyring.gpg /usr/share/keyrings/ \
  && add-apt-repository contrib \
  && apt-get update \
  && apt-get install -y --no-install-recommends cudnn \
  && apt-get install -y --no-install-recommends cuda-toolkit-12-5 cuda-drivers cudnn-cuda-12 \
  && pip install --no-cache-dir -r requirements.txt \
  && pip install --no-cache-dir -r /wheels/GDAL-3.9.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl \
  && adduser --uid 10001 --disabled-password --gecos "" --home "/home/appuser" appuser \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*  /tmp/* /var/tmp/*\
  && rm -rf /var/cache/apk/* 

COPY build/docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY build/docker/supervisord.conf /app/build/docker/supervisord.conf

RUN set -ex \
  && chmod 777 /etc/supervisor \
  && chown -R appuser:appuser /app 

# Set environment variables for CUDA
ENV PATH /usr/local/cuda/bin:$PATH
ENV LD_LIBRARY_PATH /usr/local/cuda/lib64:$LD_LIBRARY_PATH

# Switch to the non-privileged user to run the application.
USER appuser

# Copy the source code into the container.
# COPY . .

# method 2 not debuged
# COPY build/docker/start.sh /app/start.sh
# RUN  chmod +x /app/start.sh 

# Expose the port that the application listens on.
EXPOSE 5177

# Run the application.
ENTRYPOINT ["/usr/bin/supervisord", "-n"]

# method 2
# CMD ["/app/start.sh"]


# 初期大小
# 936.73mb


